// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // C-instruction ins[15] == 1; ins[14, 13] no use; ins[12] control A/M; ins[6..11] alu bits; int ins[5, 4, 3] => A, D, M; ins[2, 1, 0] => j1, j2, j3
    // Sp: if A-instruction loadA = 1, loadD = 0, writeM = 0
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=toA);
    
    Not(in=instruction[15], out=isAinstruction);
    Or(a=isAinstruction, b=instruction[5], out=loadA);
    ARegister(in=toA, load=loadA, out=outA, out[0..14]=addressM);
    Mux16(a=outA, b=inM, sel=instruction[12], out=toALUAM);

    And(a=instruction[15], b=instruction[4], out=loadD); 
    DRegister(in=outALU, load=loadD, out=toALUD);

    And(a=instruction[15], b=instruction[3], out=writeM); 

    ALU(x=toALUD, y=toALUAM, 
        zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], 
        f=instruction[7], no=instruction[6], 
        out=outALU, out=outM, zr=zr, ng=ng);

    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=notzr, b=notng, out=isPositive);
    And(a=isPositive, b=instruction[0], out=isPosJump);
    And(a=zr, b=instruction[1], out=isZeroJump);
    And(a=ng, b=instruction[2], out=isNegJump);
    Or(a=isPosJump, b=isZeroJump, out=isNotNegJump);
    Or(a=isNotNegJump, b=isNegJump, out=isJump); // load = 1 means Jump
    And(a=isJump, b=instruction[15], out=loadPC); // A-ins No Jump; C-ins Jump with laod
    PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}