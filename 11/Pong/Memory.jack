// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let heap[0] = 0;
        let heap[1] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int searchNode, searchSize, blockNode, blockAddr;
        let searchNode = freeList;
        while (~(searchNode = 0)) {
            let searchSize = ram[searchNode + 1];
            if (searchSize > (size + 1)) {
                let blockNode = searchNode + searchSize - size;
                let ram[blockNode + 1] = size; // write block size;
                let blockAddr = blockNode + 2;
                let ram[searchNode + 1] = searchSize - size - 2; // keep zero-length head;
                return blockAddr;
            }
            let searchNode = ram[searchNode];
        }
        do Sys.halt();
        return 1;
        // failure or defragmentation
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int searchNode;
        let searchNode = freeList;
        while (~(ram[searchNode] = 0)) { // search last node
            let searchNode = ram[searchNode];
        }
        let ram[searchNode] = o - 2;
        let ram[o - 2] = 0;
        return;
    }    
}
