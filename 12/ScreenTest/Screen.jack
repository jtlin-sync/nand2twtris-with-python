// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int currentColor;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i, val;
        let twoToThe = Array.new(16);
        let i = 0;
        let val = 1;
        while (i < 16) {
            let twoToThe[i] = val;
            let i = i + 1;
            let val = val + val; 
        }
        do Screen.clearScreen();
        let currentColor = 1;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 16384;
        while (i < 24576) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b) { let currentColor = 1; } else { let currentColor = 0; }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, setBit;
        let address = 16384 + (32 * y) + (x / 16);
        let value = Memory.peek(address);
        let setBit = x - (x / 16 * 16);
        if (currentColor = 1) {
            if (twoToThe[setBit] & value = 0) { // 0 => 1
                let value = value + twoToThe[setBit];
            } 
        } else {
            if (~(twoToThe[setBit] & value = 0)) { // 1 => 0
                let value = value - twoToThe[setBit];
            }
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int stX, stY, edX, edY;
        var int dx, dy, a, b, diff;
        if (x1 = x2) { // vertical line
            let stY = Math.min(y1, y2);
            let edY = Math.max(y1, y2);
            while (~(stY > edY)) {
                do Screen.drawPixel(x1, stY);
                let stY = stY + 1;
            }
            return;
        }
        if (y1 = y2) {  // horizon line
            let stX = Math.min(x1, x2);
            let edX = Math.max(x1, x2);
            while (~(stX > edX)) {
                do Screen.drawPixel(stX, y1);
                let stX = stX + 1;
            }
            return;
        }
        if (y1 > y2) {
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }
        if (x2 > x1) {
            let dx = x2 - x1;
            let dy = y2 - y1;
            let a = 0;
            let b = 0;
            let diff = 0;
            while ((a < dx) & (b < dy)) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        } else {
            let dx = x1 - x2;
            let dy = y2 - y1;
            let a = 0;
            let b = 0;
            let diff = 0;
            while ((a < dx) & (b < dy)) {
                do Screen.drawPixel(x1 - a, y1 + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int  i;
        let i = 0;
        while ((y1 + i) < (y2 + 1)) {
            do Screen.drawLine(x1, y1 + i, x2, y1 + i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int i, x1, y1, x2, y2;
        let i = -r;
        while (i < (r + 1)) {
            let x1 = x - Math.sqrt((r * r) - (i * i));
            let y1 = y + i;
            let x2 = x + Math.sqrt((r * r) - (i * i));
            let y2 = y + i;
            do Screen.drawLine(x1, y1, x2, y2);
            let i = i + 1;
        }
        return;
    }
}
